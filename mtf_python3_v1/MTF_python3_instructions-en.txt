===========================
MTF  quick start guide
===========================
The Modbus/TCP Fuzzer (MTF) is a fuzzer that can be used to test both the master and the slave sides of the protocol.
 Armed with the open specification of the Modbus/TCP protocol, we aimed for an informed fuzzer that constructs
almost-valid protocol packets (frames) with erroneous inputs.
The MTF [1] first builds a list of possible cases in the form of Modbus memory map boundaries and supported function
codes. The MTF then uses this collected knowledge so as to perform a guided fuzzing and reduce the injected frames and
the number of the tests. The MTF aims to minimize generated traffic and reduce testing time in order to reduce network noise
and remain as stealth as possible.

MTF is implemented based in Python and employs the modbus-tk (available at https://code.google.com/archive/p/modbus-tk/)
open source Modbus protocol implementation in Python, pymodbus (available at https://github.com/riptideio/pymodbus ),scapy (available at https://github.com/secdev/scapy ) 
to generate valid Modbus/TCP frames and manage the master/slave connectivity.

See  work:
[1] A.G. Voyiatzis, K. Katsigiannis and S. Koubias, A Modbus/TCP
Fuzzer for testing internetworked industrial systems.In Proceedings of
the 20th IEEE International Conference on Emerging Technologies and
Factory Automation (ETFA), Luxembourg, Sept. 8-11, 2015, pp. 1-6.

Prerequisities:
1. Python 3.7 or 3.8 installed

2. modbus-tk-1.0.0 installed  
pip3 install modbus_tk==1.0.0
  
3. Install scapy 2.4.3 library
pip3 install scapy==2.4.3

4.pip3 install coloredlogs

5.e.g git clone https://github.com/git/git
  copy to /home/user/MTF

7.From /home/user/MTF, run script mtf.py with the following parameters:
	python mtf.py -i <host>  -s <search_mode> -z <fuzz_mode> -f <csvFile=search.csv> -p <pcap_file=packets.pcap> -r <fuzz_reguest>'   

	host            - the IP of the remote machine (under test)
	csvFile         - stores search information
	pcap_file       - trace pcap file 
	fuzz_reguest    - number of requests for every FC found during the identification phase (default=200)

I. python mtf.py -i 192.168.x.x -s -f, identification process, where 192.168.Î§.Î§ is the IP address of the device or software with open port 502
Output:
	a) generation of a file with name "search.csv". The file contains the list of supported FC and addressed of the device or software
	under test.
	b) generation of a file with name "dump_memory.csv", storing information for the dump memory attack (retrieve information regarding
	the memory locations of the remote machine (SUT) (Address 0x Value READ_COILS", "Address 3x Value READ_INPUT_REGISTERS" etc.
	c) generation of log files with name format "info_Y_m_d_H_M_S.log" (Year_Month_Day_Hour_Minute_Second.log) and
	"error_Y_m_d_H_M_S.log" containing information about the executed transactions during the identification phase.

II. python mtf.py -i 192.168.x.x -s -z -f, identification process (phase 1) and then fuzzing (phase 2).
Output:
	a) generation of log files with name format "info_Y_m_d_H_M_S.log" (Year_Month_Day_Hour_Minute_Second.log) and
	"error_Y_m_d_H_M_S.log" containing information about the executed transactions (requests-responses) and errors.
	b) generated files as I.a and I.b above.

III. python mtf.py -i 192.168.x.x  -z -f fuzzing process (phase 2), assumes that the file "search.csv" already exists
	(generated by phase 1 of I above).

IV. python mtf.py -i 192.168.x.x -s -f -p, identification phase based on pcap files. A "search.csv" file is generated as in I.
	The file contains the list of supported FC and addresses based on the traffic read from the pcap file
	(if option -z is given, then mtf.py starts automatically the fuzzing process as well).


INFO: 
Defaults directory ./ 'install dir' -- such as MTF
 ./           -- save search.csv (FC support and address  and dump_memory.csv (map address table), csv file after search mode (reconnaissance)
log_dir=./log -- path log file,save log files, 
 
/utils 
some utils script
/txt 
some instructions-en
/reconnaissance
some results from reconnaissance
	
	
prob_lis: The following list defines the probabilities of applying each fuzzing categoy (it is not dynamic, must be configured manually).
prob_list = [('payload', 0.3), ('field_ADU', 0.1), ('field pdu', 0.3),('two fields in message', 0.2),('Not_fuzz',0.1]


